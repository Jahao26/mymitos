MIT6.S081 Operating Systems
学习时间：2023.5.10 ~至今

已完成时间：
Lab1 - Unix utilities｜Unix 实用工具：
目标简述： 实现几个用户态程序及 unix 实用工具，熟悉 xv6 的开发环境以及系统调用的使用。
实验难度： 🟩🟩🟩 3 easy, 🟧🟧🟧 3 moderate


Lab2 - System calls｜系统调用：
目标简述： 添加 syscall 跟踪，以及添加新的系统调用 sysinfo，帮助加深对 xv6 内核的理解。
实验难度： 🟧🟧 2 moderate


Lab3 - Page tables｜页表：
目标简述： 探索页表，为每个进程维护独立的内核页表；修改页表以简化从用户态拷贝数据到内核态的方法。
（难点：理解进程页表、内核页表概念）
实验难度： 🟩 1 easy, 🟥🟥 2 hard


Lab4 - Traps｜中断陷阱：
目标简述： 探索中断以及中断处理机制（trap、trampoline、函数调用、现场保存、页表/特权切换、调用栈、栈指针及返回指针）
（注：本 lab 并不非常难，重要的是理解 lecture5 与 lecture6 中的概念）
实验难度： 🟩 1 easy, 🟧 1 moderate, 🟥 1 hard



待完成实验：
Lab5 - Lazy allocation｜内存页懒分配：
目标简述： 实现内存页懒分配机制，在调用 sbrk() 的时候，不立即分配内存，而是只作记录。在访问到这一部分内存页并触发缺页异常的时候才进行实际的物理内存分配。
实验难度： 🟩 1 easy, 🟧 2 moderate


Lab6 - Copy-on-write fork｜fork 懒拷贝：
目标简述： 实现 fork 懒复制机制，在进程 fork 后，与父进程共享物理内存页。在任一方尝试对内存页进行修改时，才对内存页进行复制。
实验难度： 🟥 1 hard


Lab7 - Multithreading｜多线程：
目标简述： 实现一个用户态的线程库；尝试使用线程来为程序提速；实现一个同步屏障
实验难度： 🟧🟧🟧 3 moderate


Lab8 - Parallelism/Locking｜并发与锁：
目标简述： 重新设计并发代码以降低锁竞争，提高在多核系统上的性能。
实验难度： 🟧 1 moderate, 🟥 1 hard
（在第二个实验做到无死锁无错误上构思花费了比较多时间，其实本 lab 测试没有那么强，测不出来这些边界情况）


Lab9 - File System｜文件系统：
目标简述： 为 xv6 的文件系统添加大文件以及符号链接支持。
实验难度： 🟧🟧 2 moderate


Lab10 - Mmap | 文件内存映射：
目标简述： 实现 *nix 系统调用 mmap 的简单版：支持将文件映射到一片用户虚拟内存区域内，并且支持将对其的修改写回磁盘。
实验难度： 🟥 1 hard


Lab11 - Network stack：
目标简述： 熟悉系统驱动与外围设备的交互、内存映射寄存器与 DMA 数据传输，实现与 E1000 网卡交互的核心方法：transmit 与 recv。
（本 lab 的难度主要在于阅读文档以及理解 CPU 与操作系统是如何与外围设备交互的。换言之，更重要的是理解概念以及 lab 已经写好的模版代码的作用。）
实验难度： 🟥 1 hard

===========================================
xv6 is a re-implementation of Dennis Ritchie's and Ken Thompson's Unix
Version 6 (v6).  xv6 loosely follows the structure and style of v6,
but is implemented for a modern RISC-V multiprocessor using ANSI C.

ACKNOWLEDGMENTS

xv6 is inspired by John Lions's Commentary on UNIX 6th Edition (Peer
to Peer Communications; ISBN: 1-57398-013-7; 1st edition (June 14,
2000)).  See also https://pdos.csail.mit.edu/6.1810/, which provides
pointers to on-line resources for v6.

The following people have made contributions: Russ Cox (context switching,
locking), Cliff Frey (MP), Xiao Yu (MP), Nickolai Zeldovich, and Austin
Clements.

We are also grateful for the bug reports and patches contributed by
Takahiro Aoyagi, Silas Boyd-Wickizer, Anton Burtsev, carlclone, Ian
Chen, Dan Cross, Cody Cutler, Mike CAT, Tej Chajed, Asami Doi,
eyalz800, Nelson Elhage, Saar Ettinger, Alice Ferrazzi, Nathaniel
Filardo, flespark, Peter Froehlich, Yakir Goaron, Shivam Handa, Matt
Harvey, Bryan Henry, jaichenhengjie, Jim Huang, Matúš Jókay, John
Jolly, Alexander Kapshuk, Anders Kaseorg, kehao95, Wolfgang Keller,
Jungwoo Kim, Jonathan Kimmitt, Eddie Kohler, Vadim Kolontsov, Austin
Liew, l0stman, Pavan Maddamsetti, Imbar Marinescu, Yandong Mao, Matan
Shabtay, Hitoshi Mitake, Carmi Merimovich, Mark Morrissey, mtasm, Joel
Nider, Hayato Ohhashi, OptimisticSide, Harry Porter, Greg Price, Jude
Rich, segfault, Ayan Shafqat, Eldar Sehayek, Yongming Shen, Fumiya
Shigemitsu, Cam Tenny, tyfkda, Warren Toomey, Stephen Tu, Rafael Ubal,
Amane Uehara, Pablo Ventura, Xi Wang, WaheedHafez, Keiichi Watanabe,
Nicolas Wolovick, wxdao, Grant Wu, Jindong Zhang, Icenowy Zheng,
ZhUyU1997, and Zou Chang Wei.


The code in the files that constitute xv6 is
Copyright 2006-2022 Frans Kaashoek, Robert Morris, and Russ Cox.

ERROR REPORTS

Please send errors and suggestions to Frans Kaashoek and Robert Morris
(kaashoek,rtm@mit.edu).  The main purpose of xv6 is as a teaching
operating system for MIT's 6.1810, so we are more interested in
simplifications and clarifications than new features.

BUILDING AND RUNNING XV6

You will need a RISC-V "newlib" tool chain from
https://github.com/riscv/riscv-gnu-toolchain, and qemu compiled for
riscv64-softmmu.  Once they are installed, and in your shell
search path, you can run "make qemu".
